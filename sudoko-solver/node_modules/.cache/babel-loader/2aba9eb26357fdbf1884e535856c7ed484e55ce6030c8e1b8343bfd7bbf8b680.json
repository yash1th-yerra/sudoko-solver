{"ast":null,"code":"var _jsxFileName = \"/home/user/Sudoko-Solver/sudoko-solver/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./SudokoSolver.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SudokuSolver = () => {\n  _s();\n  const [sudoku, setSudoku] = useState(Array.from({\n    length: 9\n  }, () => Array(9).fill(\"0\"))); // Independent rows\n  const [output, setOutput] = useState(\"\");\n  const handleChange = (row, col, value) => {\n    const newSudoku = [...sudoku];\n    newSudoku[row] = [...newSudoku[row]]; // Ensure deep copy of the row\n    newSudoku[row][col] = value ? parseInt(value) : \"0\";\n    setSudoku(newSudoku);\n    console.log(\"Updated Sudoku Grid:\", newSudoku);\n  };\n  const clearGrid = () => {\n    setSudoku(Array.from({\n      length: 9\n    }, () => Array(9).fill(\"0\")));\n    setOutput(\"\");\n  };\n  const solveSudoku = async () => {\n    setOutput(\"Solving...\");\n    try {\n      const response = await fetch(\"http://localhost:8080/solve-sudoko\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          grid: sudoku\n        })\n      });\n      if (response.ok) {\n        const {\n          solvedGrid\n        } = await response.json();\n        setSudoku(solvedGrid);\n        setOutput(\"Solved Successfully!\");\n      } else {\n        const errorDetails = await response.text();\n        console.error(\"Backend Error:\", errorDetails);\n        setOutput(\"Failed to solve Sudoku. Check the input.\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setOutput(\"Error connecting to the server.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: sudoku.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sudoku-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"9\",\n          value: cell || \"\",\n          onChange: e => handleChange(rowIndex, colIndex, e.target.value)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solveSudoku,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearGrid,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output\",\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(SudokuSolver, \"ZrqqqieR6fIXZPwAru3PfgxhW+Y=\");\n_c = SudokuSolver;\nexport default SudokuSolver;\nvar _c;\n$RefreshReg$(_c, \"SudokuSolver\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SudokuSolver","_s","sudoku","setSudoku","Array","from","length","fill","output","setOutput","handleChange","row","col","value","newSudoku","parseInt","console","log","clearGrid","solveSudoku","response","fetch","method","headers","body","JSON","stringify","grid","ok","solvedGrid","json","errorDetails","text","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","type","min","max","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/user/Sudoko-Solver/sudoko-solver/src/App.js"],"sourcesContent":["import React,{ useState } from \"react\";\nimport \"./SudokoSolver.css\";\n\nconst SudokuSolver = () => {\n  const [sudoku, setSudoku] = useState(\n    Array.from({ length: 9 }, () => Array(9).fill(\"0\"))\n  ); // Independent rows\n  const [output, setOutput] = useState(\"\");\n\n  const handleChange = (row, col, value) => {\n    const newSudoku = [...sudoku];\n    newSudoku[row] = [...newSudoku[row]]; // Ensure deep copy of the row\n    newSudoku[row][col] = value ? parseInt(value) : \"0\";\n    setSudoku(newSudoku);\n    console.log(\"Updated Sudoku Grid:\", newSudoku);\n  };\n\n  const clearGrid = () => {\n    setSudoku(Array.from({ length: 9 }, () => Array(9).fill(\"0\")));\n    setOutput(\"\");\n  };\n\n  const solveSudoku = async () => {\n    setOutput(\"Solving...\");\n    try {\n      const response = await fetch(\"http://localhost:8080/solve-sudoko\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ grid: sudoku }),\n      });\n\n      if (response.ok) {\n        const { solvedGrid } = await response.json();\n        setSudoku(solvedGrid);\n        setOutput(\"Solved Successfully!\");\n      } else {\n        const errorDetails = await response.text();\n        console.error(\"Backend Error:\", errorDetails);\n        setOutput(\"Failed to solve Sudoku. Check the input.\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setOutput(\"Error connecting to the server.\");\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Sudoku Solver</h1>\n      <div className=\"sudoku-grid\">\n        {sudoku.map((row, rowIndex) => (\n          <div className=\"sudoku-row\" key={rowIndex}>\n            {row.map((cell, colIndex) => (\n              <input\n                key={`${rowIndex}-${colIndex}`}\n                type=\"number\"\n                min=\"1\"\n                max=\"9\"\n                value={cell || \"\"}\n                onChange={(e) =>\n                  handleChange(rowIndex, colIndex, e.target.value)\n                }\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"buttons\">\n        <button onClick={solveSudoku}>Solve</button>\n        <button onClick={clearGrid}>Clear</button>\n      </div>\n      <div className=\"output\">{output}</div>\n    </div>\n  );\n};\n\nexport default SudokuSolver;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}